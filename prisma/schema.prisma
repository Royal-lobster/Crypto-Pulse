generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tokens    Token[]
  hiIQ      Float
  TokenUser TokenUser[]
}

model Token {
  id           String      @id
  ticker       String      @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  image        String
  news         News[]
  statisticsId String?     @unique
  users        User[]
  TokenNews    TokenNews[]
  lastRefresh  DateTime?
  Statistics   Statistics?
  TokenUser    TokenUser[]
}

model News {
  id          String      @id
  createdAt   DateTime    @default(now())
  title       String
  rawContent  String?
  description String?
  content     String?
  image       String?
  tokens      Token       @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  TokenNews   TokenNews[]
  tokenId     String
}

model TokenUser {
  id      String @id
  token   Token  @relation(fields: [tokenId], references: [id])
  tokenId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@unique([tokenId, userId])
}

model TokenNews {
  id      String @id
  token   Token  @relation(fields: [tokenId], references: [id])
  tokenId String
  news    News   @relation(fields: [newsId], references: [id])
  newsId  String

  @@unique([tokenId, newsId])
}

model Statistics {
  id              String   @id
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  dayLowestPrice  Float
  dayHighestPrice Float
  dayVolume       Float
  tokenId         String   @unique
  Token           Token?   @relation(fields: [tokenId], references: [id], onDelete: Cascade)
}
